// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VirtualLab.Infrastructure.DataBase;

#nullable disable

namespace VirtualLab.Migrations
{
    [DbContext(typeof(LabDbContext))]
    [Migration("20240603092427_CreateDb")]
    partial class CreateDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VirtualLab.Domain.Entities.Credential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("VmId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Credentials");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.Lab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Manual")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserLabId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserLabId")
                        .IsUnique();

                    b.ToTable("Report");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.StatusUserLab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserLabStatus");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.UserLab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LabId");

                    b.ToTable("UserLabs");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.VirtualMachine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Node")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProxmoxVmId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserLabId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("VirtualMachines");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.Report", b =>
                {
                    b.HasOne("VirtualLab.Domain.Entities.UserLab", "UserLab")
                        .WithOne("Report")
                        .HasForeignKey("VirtualLab.Domain.Entities.Report", "UserLabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserLab");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.UserLab", b =>
                {
                    b.HasOne("VirtualLab.Domain.Entities.Lab", "Lab")
                        .WithMany("UserLabs")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lab");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.Lab", b =>
                {
                    b.Navigation("UserLabs");
                });

            modelBuilder.Entity("VirtualLab.Domain.Entities.UserLab", b =>
                {
                    b.Navigation("Report");
                });
#pragma warning restore 612, 618
        }
    }
}
