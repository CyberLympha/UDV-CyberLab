import { Plugin } from "./plugin";
export declare type Listener<T> = (val: T, prevVal: T) => void;
export declare type Unsubscriber = () => void;
export declare type Options = {
    [key: string]: any;
};
export declare class BaseObservable<T> {
    private _val;
    private _prevVal;
    private _options;
    private _inputs;
    private _outputs;
    private _listeners;
    private _attachedToInputs;
    constructor(val: T, options?: Options);
    get(): T;
    protected _get(): T;
    protected _evaluate(): T;
    protected _set(val: T): void;
    subscribe(listener: Listener<T>): Unsubscriber;
    /**
     * @deprecated Use observable.subscribe() instead
     */
    onChange: (listener: Listener<T>) => Unsubscriber;
    protected onBecomeObserved(): void;
    protected onBecomeUnobserved(): void;
    getInputs(): BaseObservable<any>[];
    getOptions<O extends Options = Options>(): O;
    withOptions<O extends Options = Options>(options: Partial<O>): this;
    protected static _captureInputs<T>(block: () => T): BaseObservable<any>[];
    protected _addInput(input: BaseObservable<any>): void;
    protected _removeInput(input: BaseObservable<any>): void;
    private _shouldAttachToInputs;
    private _attachToInputs;
    private _detachFromInputs;
    private _attachToInput;
    private _detachFromInput;
    private _addToBatchRecursively;
    protected static _batch(block: () => void): void;
    protected static _use(plugin: Plugin): void;
}
