{"version":3,"file":"micro-observables.cjs.development.js","sources":["../src/batchedUpdater.ts","../src/pluginManager.ts","../src/baseObservable.ts","../src/memoize.ts","../src/observable.ts","../src/useObservable.ts","../src/shallowEqual.ts","../src/withObservables.ts"],"sourcesContent":["export type BatchedUpdater = (block: () => void) => void;\n\nexport let batchedUpdater: BatchedUpdater | undefined;\n\nexport function setBatchedUpdater(updater: BatchedUpdater | undefined) {\n  batchedUpdater = updater;\n}\n","import { BaseObservable } from \"./baseObservable\";\nimport { Plugin } from \"./plugin\";\n\nexport class PluginManager {\n  private _plugins: Plugin[] = [];\n\n  use(plugin: Plugin) {\n    this._plugins.push(plugin);\n  }\n\n  onCreate(observable: BaseObservable<any>, val: any) {\n    this._plugins.forEach(it => it.onCreate?.(observable, val));\n  }\n\n  onChange(observable: BaseObservable<any>, val, prevVal) {\n    this._plugins.forEach(it => it.onChange?.(observable, val, prevVal));\n  }\n\n  onBecomeObserved(observable: BaseObservable<any>) {\n    this._plugins.forEach(it => it.onBecomeObserved?.(observable));\n  }\n\n  onBecomeUnobserved(observable: BaseObservable<any>) {\n    this._plugins.forEach(it => it.onBecomeUnobserved?.(observable));\n  }\n\n  onAttach(observable: BaseObservable<any>, input: BaseObservable<any>) {\n    this._plugins.forEach(it => it.onAttach?.(observable, input));\n  }\n\n  onDetach(observable: BaseObservable<any>, input: BaseObservable<any>) {\n    this._plugins.forEach(it => it.onDetach?.(observable, input));\n  }\n}\n","import { batchedUpdater } from \"./batchedUpdater\";\nimport { Plugin } from \"./plugin\";\nimport { PluginManager } from \"./pluginManager\";\n\nconst UNSET = Symbol();\n\nconst plugins = new PluginManager();\n\nconst capturedInputFrames: BaseObservable<any>[][] = [];\nlet shouldCaptureNextInput = false;\n\nlet batchedObservables: BaseObservable<any>[] = [];\nlet batchDepth = 0;\n\nexport type Listener<T> = (val: T, prevVal: T) => void;\nexport type Unsubscriber = () => void;\nexport type Options = { [key: string]: any };\n\nexport class BaseObservable<T> {\n  private _val: T;\n  private _prevVal: T | typeof UNSET = UNSET;\n  private _options: Options;\n  private _inputs: BaseObservable<any>[] = [];\n  private _outputs: BaseObservable<any>[] = [];\n  private _listeners: Listener<T>[] = [];\n  private _attachedToInputs = false;\n\n  constructor(val: T, options: Options = {}) {\n    this._val = val;\n    this._options = options;\n    plugins.onCreate(this, val);\n  }\n\n  get(): T {\n    const capturedInputs = capturedInputFrames[capturedInputFrames.length - 1];\n    if (capturedInputs && shouldCaptureNextInput) {\n      try {\n        shouldCaptureNextInput = false;\n        capturedInputs.push(this);\n        return this._get();\n      } finally {\n        shouldCaptureNextInput = true;\n      }\n    } else {\n      return this._get();\n    }\n  }\n\n  protected _get(): T {\n    const shouldEvaluate = !this._attachedToInputs || this._prevVal !== UNSET;\n    return shouldEvaluate ? this._evaluate() : this._val;\n  }\n\n  protected _evaluate(): T {\n    return this._val;\n  }\n\n  protected _set(val: T) {\n    if (this._val !== val) {\n      this._addToBatchRecursively();\n      this._val = val;\n    }\n  }\n\n  subscribe(listener: Listener<T>): Unsubscriber {\n    this._listeners.push(listener);\n    this._attachToInputs();\n\n    let listenerRemoved = false;\n    return () => {\n      if (!listenerRemoved) {\n        listenerRemoved = true;\n        this._listeners.splice(this._listeners.indexOf(listener), 1);\n        this._detachFromInputs();\n      }\n    };\n  }\n\n  /**\n   * @deprecated Use observable.subscribe() instead\n   */\n  onChange = this.subscribe;\n\n  protected onBecomeObserved() {\n    // Called when the first listener subscribes to the observable or to one of its outputs\n  }\n\n  protected onBecomeUnobserved() {\n    // Called when the last listener unsubscribes from the observable and from all of its outputs\n  }\n\n  getInputs(): BaseObservable<any>[] {\n    return this._inputs;\n  }\n\n  getOptions<O extends Options = Options>(): O {\n    return this._options as O;\n  }\n\n  withOptions<O extends Options = Options>(options: Partial<O>): this {\n    this._options = { ...this._options, ...options };\n    return this;\n  }\n\n  protected static _captureInputs<T>(block: () => T): BaseObservable<any>[] {\n    try {\n      const capturedInputs = [];\n      capturedInputFrames.push(capturedInputs);\n      shouldCaptureNextInput = true;\n      block();\n      return capturedInputs;\n    } finally {\n      capturedInputFrames.pop();\n      shouldCaptureNextInput = false;\n    }\n  }\n\n  protected _addInput(input: BaseObservable<any>) {\n    this._inputs.push(input);\n    if (this._attachedToInputs) {\n      this._attachToInput(input);\n    }\n  }\n\n  protected _removeInput(input: BaseObservable<any>) {\n    this._inputs.splice(this._inputs.indexOf(input), 1);\n    if (this._attachedToInputs) {\n      this._detachFromInput(input);\n    }\n  }\n\n  private _shouldAttachToInputs(): boolean {\n    // Only attach to inputs when at least one listener is subscribed to the observable or to one of its outputs.\n    // This is done to avoid unused observables being references by their inputs, preventing garbage-collection.\n    return this._listeners.length > 0 || this._outputs.length > 0;\n  }\n\n  private _attachToInputs() {\n    if (!this._attachedToInputs && this._shouldAttachToInputs()) {\n      this._attachedToInputs = true;\n\n      // Since the observable was not attached to its inputs, its value may be outdated.\n      // Refresh it so that listeners will be called with the correct prevValue the next time an input changes.\n      this._val = this._evaluate();\n\n      this.onBecomeObserved();\n      plugins.onBecomeObserved(this);\n\n      for (const input of this._inputs) {\n        this._attachToInput(input);\n        input._attachToInputs();\n      }\n    }\n  }\n\n  private _detachFromInputs() {\n    if (this._attachedToInputs && !this._shouldAttachToInputs()) {\n      this._attachedToInputs = false;\n      for (const input of this._inputs) {\n        this._detachFromInput(input);\n        input._detachFromInputs();\n      }\n\n      this.onBecomeUnobserved();\n      plugins.onBecomeUnobserved(this);\n    }\n  }\n\n  private _attachToInput(input: BaseObservable<any>) {\n    input._outputs.push(this);\n    plugins.onAttach(this, input);\n  }\n\n  private _detachFromInput(input: BaseObservable<any>) {\n    input._outputs.splice(input._outputs.indexOf(this), 1);\n    plugins.onDetach(this, input);\n  }\n\n  private _addToBatchRecursively() {\n    if (this._prevVal === UNSET) {\n      this._prevVal = this._val;\n\n      // Add the observable and its outputs in reverse topological order\n      for (const output of this._outputs) {\n        output._addToBatchRecursively();\n      }\n      batchedObservables.push(this);\n    }\n  }\n\n  protected static _batch(block: () => void) {\n    try {\n      batchDepth++;\n      if (batchDepth === 1 && batchedUpdater) {\n        batchedUpdater(block);\n      } else {\n        block();\n      }\n    } finally {\n      batchDepth--;\n      if (batchDepth === 0) {\n        const observablesToUpdate = batchedObservables;\n        batchedObservables = [];\n\n        // Iterate in reverse order as _addToBatchRecursively() adds them in reverse topological order\n        for (let i = observablesToUpdate.length - 1; i >= 0; i--) {\n          const observable = observablesToUpdate[i];\n          const prevVal = observable._prevVal;\n          observable._prevVal = UNSET;\n          observable._val = observable._evaluate();\n          const val = observable._val;\n\n          if (val !== prevVal) {\n            for (const listener of observable._listeners.slice()) {\n              listener(val, prevVal);\n            }\n            plugins.onChange(observable, val, prevVal);\n          }\n        }\n      }\n    }\n  }\n\n  protected static _use(plugin: Plugin) {\n    plugins.use(plugin);\n  }\n}\n","export function memoize<T extends any[], U>(func: (args: T) => U): (args: T) => U {\n  let lastArgs: T | undefined;\n  let lastResult!: U;\n\n  return (args: T) => {\n    let argsHaveChanged = false;\n    if (!lastArgs || args.length !== lastArgs.length) {\n      argsHaveChanged = true;\n    } else {\n      for (let i = 0; i < args.length; i++) {\n        if (args[i] !== lastArgs[i]) {\n          argsHaveChanged = true;\n          break;\n        }\n      }\n    }\n\n    if (argsHaveChanged) {\n      lastArgs = args;\n      lastResult = func(args);\n    }\n\n    return lastResult;\n  };\n}\n","import { BaseObservable, Options } from \"./baseObservable\";\nimport { memoize } from \"./memoize\";\nimport { Plugin } from \"./plugin\";\n\nexport type ObservableValue<T> = T extends Observable<infer U> ? U : never;\nexport type ObservableValues<T> = { [K in keyof T]: ObservableValue<T[K]> };\n\nexport function observable<T>(val: T | Observable<T>, options?: Options): WritableObservable<T> {\n  return new WritableObservable(val, options);\n}\n\nexport function derived<T>(derive: () => T): Observable<T> {\n  return Observable.compute(derive);\n}\n\nexport class Observable<T> extends BaseObservable<T> {\n  protected _valInput: Observable<T> | undefined;\n\n  constructor(val: T | Observable<T>, options?: Options) {\n    super(val instanceof Observable ? val.get() : val, options);\n    this._updateValInput(val);\n  }\n\n  protected _evaluate(): T {\n    return this._valInput ? this._valInput.get() : super._evaluate();\n  }\n\n  select<U>(selector: (val: T) => U | Observable<U>): Observable<U> {\n    return new DerivedObservable([this], ([val]) => selector(val));\n  }\n\n  /**\n   * @deprecated Use observable.select() instead\n   */\n  transform = this.select;\n\n  onlyIf(predicate: (val: T) => boolean): Observable<T | undefined> {\n    let filteredVal: T | undefined = undefined;\n    return this.select(val => {\n      if (predicate(val)) {\n        filteredVal = val;\n      }\n      return filteredVal;\n    });\n  }\n\n  default(defaultVal: NonNullable<T> | Observable<NonNullable<T>>): Observable<NonNullable<T>> {\n    return this.select(val => val ?? defaultVal);\n  }\n\n  as<U extends T>(): Observable<U> {\n    return (this as unknown) as Observable<U>;\n  }\n\n  static select<T extends readonly Observable<any>[], U>(\n    observables: [...T],\n    selector: (...vals: ObservableValues<T>) => U\n  ): Observable<U> {\n    return new DerivedObservable(observables, vals => selector(...vals));\n  }\n\n  /**\n   * @deprecated Use Observable.select() instead\n   */\n  static from<T extends Observable<any>[]>(...observables: T): Observable<ObservableValues<T>> {\n    return new DerivedObservable(observables, values => values);\n  }\n\n  static merge<T>(observables: Observable<T>[]): Observable<T[]> {\n    return new DerivedObservable(observables, values => values);\n  }\n\n  static latest<T extends Observable<any>[]>(...observables: T): Observable<ObservableValue<T[number]>> {\n    let prevValues: T[] | undefined;\n    return new DerivedObservable(observables, values => {\n      const val = !prevValues ? values[0] : values.find((it, index) => it !== prevValues![index])!;\n      prevValues = values;\n      return val;\n    });\n  }\n\n  static compute<U>(compute: () => U): Observable<U> {\n    return new ComputedObservable(compute);\n  }\n\n  static fromPromise<T, E = undefined>(\n    promise: Promise<T>,\n    onError?: (error: any) => E\n  ): Observable<T | E | undefined> {\n    const obs = observable<T | E | undefined>(undefined);\n    promise.then(\n      val => obs.set(val),\n      e => onError && obs.set(onError(e))\n    );\n    return obs;\n  }\n\n  toPromise(): Promise<T> {\n    return new Promise(resolve => {\n      const unsubscribe = this.subscribe(val => {\n        resolve(val);\n        unsubscribe();\n      });\n    });\n  }\n\n  static batch(block: () => void) {\n    BaseObservable._batch(block);\n  }\n\n  static use(plugin: Plugin) {\n    BaseObservable._use(plugin);\n  }\n\n  protected _updateValInput(val: T | Observable<T>) {\n    if (this._valInput !== val) {\n      if (this._valInput) {\n        this._removeInput(this._valInput);\n        this._valInput = undefined;\n      }\n      if (val instanceof Observable) {\n        this._addInput(val);\n        this._valInput = val;\n      }\n    }\n  }\n}\n\nexport class WritableObservable<T> extends Observable<T> {\n  set(val: T | Observable<T>) {\n    this._updateValInput(val);\n    Observable.batch(() => this._set(val instanceof Observable ? val.get() : val));\n  }\n\n  update(updater: (val: T) => T | Observable<T>) {\n    this.set(updater(this.get()));\n  }\n\n  readOnly(): Observable<T> {\n    return this;\n  }\n}\n\nclass DerivedObservable<T, U extends Observable<any>[]> extends Observable<T> {\n  private _compute: (vals: ObservableValues<U>) => T | Observable<T>;\n  private _computeInputs: U;\n\n  constructor(computeInputs: U, compute: (vals: ObservableValues<U>) => T | Observable<T>) {\n    // No need to initialize it as it will be evaluated the first time get() or subscribe() is called\n    super(undefined as any);\n    this._compute = memoize(compute);\n    this._computeInputs = computeInputs;\n    for (const input of computeInputs) {\n      this._addInput(input);\n    }\n  }\n\n  _evaluate(): T {\n    const computed = this._compute(this._computeInputs.map(input => input.get()) as ObservableValues<U>);\n    this._updateValInput(computed);\n    return computed instanceof Observable ? computed.get() : computed;\n  }\n}\n\nclass ComputedObservable<T> extends Observable<T> {\n  private _compute: () => T;\n  private _currentInputs = new Set<BaseObservable<any>>();\n\n  constructor(compute: () => T) {\n    // No need to initialize it as it will be evaluated the first time get() or subscribe() is called\n    super(undefined as any);\n    this._compute = compute;\n  }\n\n  _evaluate(): T {\n    let value!: T;\n\n    const inputs = new Set(BaseObservable._captureInputs(() => (value = this._compute())));\n    inputs.forEach(input => {\n      if (!this._currentInputs.has(input)) {\n        this._addInput(input);\n      } else {\n        this._currentInputs.delete(input);\n      }\n    });\n    this._currentInputs.forEach(input => this._removeInput(input));\n    this._currentInputs = inputs;\n\n    return value;\n  }\n}\n","import { useLayoutEffect, useMemo, useState } from \"react\";\nimport { Observable } from \"./observable\";\n\nexport function useObservable<T>(observable: Observable<T>): T {\n  const [, forceRender] = useState({});\n  const val = observable.get();\n\n  useLayoutEffect(() => {\n    return observable.subscribe(() => forceRender({}));\n  }, [observable]);\n\n  return val;\n}\n\nexport function useMemoizedObservable<T>(factory: () => Observable<T>, deps: any[] = []): T {\n  return useObservable(useMemo(factory, deps));\n}\n\nexport function useComputedObservable<T>(compute: () => T, deps: any[] = []): T {\n  return useMemoizedObservable(() => Observable.compute(compute), deps);\n}\n","// Code ported from React source-code\n\nfunction is(x: any, y: any): boolean {\n  return (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y);\n}\n\nexport function shallowEqual(objA: any, objB: any): boolean {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n    return false;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  for (let i = 0; i < keysA.length; i++) {\n    if (!objB.hasOwnProperty(keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Unsubscriber } from \"./baseObservable\";\nimport { Observable, ObservableValues } from \"./observable\";\nimport { shallowEqual } from \"./shallowEqual\";\n\ntype Mapping = { [key: string]: Observable<any> };\ntype InjectedProps<M extends Mapping> = ObservableValues<M>;\ntype HocProps<P extends InjectedProps<M>, M extends Mapping> = Pick<P, Exclude<keyof P, keyof M>>;\n\nexport const withObservables = <P extends InjectedProps<M>, M extends Mapping>(\n  Component: React.ComponentType<P>,\n  mapping: (ownProps: HocProps<P, M>) => M\n): React.ComponentType<HocProps<P, M>> => {\n  class WithObservables extends React.PureComponent<HocProps<P, M>> {\n    private _ownProps!: HocProps<P, M>;\n    private _mapping!: M;\n    private _unsubscribers: Unsubscriber[] = [];\n\n    componentWillUnmount() {\n      this._unsubscribers.forEach(it => it());\n      this._unsubscribers = [];\n    }\n\n    render(): JSX.Element {\n      this.updateMapping();\n\n      const injectedProps: { [key: string]: any } = {};\n      for (const key of Object.keys(this._mapping)) {\n        injectedProps[key] = this._mapping[key].get();\n      }\n\n      return React.createElement(Component, { ...this.props, ...injectedProps } as P);\n    }\n\n    private updateMapping() {\n      if (!this._ownProps || !shallowEqual(this._ownProps, this.props)) {\n        this._ownProps = this.props;\n        this._mapping = typeof mapping === \"function\" ? mapping(this.props) : mapping;\n\n        const unsubscribers = Object.values(this._mapping).map(observable =>\n          observable.subscribe(() => this.forceUpdate())\n        );\n        this._unsubscribers.forEach(it => it());\n        this._unsubscribers = unsubscribers;\n      }\n    }\n  }\n  return hoistNonReactStatics(WithObservables, Component);\n};\n"],"names":["setBatchedUpdater","updater","batchedUpdater","PluginManager","use","plugin","_plugins","push","onCreate","observable","val","forEach","it","onChange","prevVal","onBecomeObserved","onBecomeUnobserved","onAttach","input","onDetach","UNSET","Symbol","plugins","capturedInputFrames","shouldCaptureNextInput","batchedObservables","batchDepth","BaseObservable","options","subscribe","_val","_options","get","capturedInputs","length","_get","shouldEvaluate","_attachedToInputs","_prevVal","_evaluate","_set","_addToBatchRecursively","listener","_listeners","_attachToInputs","listenerRemoved","splice","indexOf","_detachFromInputs","getInputs","_inputs","getOptions","withOptions","_captureInputs","block","pop","_addInput","_attachToInput","_removeInput","_detachFromInput","_shouldAttachToInputs","_outputs","output","_batch","observablesToUpdate","i","slice","_use","memoize","func","lastArgs","lastResult","args","argsHaveChanged","WritableObservable","derived","derive","Observable","compute","select","_updateValInput","_valInput","selector","DerivedObservable","onlyIf","predicate","filteredVal","undefined","defaultVal","as","observables","vals","from","values","merge","latest","prevValues","find","index","ComputedObservable","fromPromise","promise","onError","obs","then","set","e","toPromise","Promise","resolve","unsubscribe","batch","update","readOnly","computeInputs","_compute","_computeInputs","computed","map","Set","value","inputs","_currentInputs","has","useObservable","useState","forceRender","useLayoutEffect","useMemoizedObservable","factory","deps","useMemo","useComputedObservable","is","x","y","shallowEqual","objA","objB","keysA","Object","keys","keysB","hasOwnProperty","withObservables","Component","mapping","WithObservables","componentWillUnmount","_unsubscribers","render","updateMapping","injectedProps","_mapping","key","React","createElement","props","_ownProps","unsubscribers","forceUpdate","PureComponent","hoistNonReactStatics"],"mappings":"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"}